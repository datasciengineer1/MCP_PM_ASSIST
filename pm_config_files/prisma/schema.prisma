generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/pm_assistant_mvp/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Project {
  id              String   @id @default(cuid())
  title           String
  description     String?
  status          ProjectStatus @default(PLANNING)
  priority        Priority @default(MEDIUM)
  estimatedDuration Int?   // in days
  startDate       DateTime?
  endDate         DateTime?
  industry        String?
  projectType     ProjectType @default(SOFTWARE)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  requirements    Requirement[]
  tasks          Task[]
  risks          Risk[]
  documents      Document[]
  agentExecutions AgentExecution[]
  uploads        FileUpload[]
  
  @@map("projects")
}

model Agent {
  id          String   @id @default(cuid())
  name        String   @unique
  type        AgentType
  description String?
  config      Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  executions  AgentExecution[]
  
  @@map("agents")
}

model AgentExecution {
  id          String   @id @default(cuid())
  agentId     String
  projectId   String
  status      ExecutionStatus @default(PENDING)
  input       Json?
  output      Json?
  metadata    Json?
  startedAt   DateTime?
  completedAt DateTime?
  errorMessage String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  agent       Agent   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("agent_executions")
}

model Requirement {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  description String
  category    RequirementCategory @default(FUNCTIONAL)
  priority    Priority @default(MEDIUM)
  status      RequirementStatus @default(DRAFT)
  tags        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("requirements")
}

model Task {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority @default(MEDIUM)
  estimatedHours Int?
  assignee    String?
  startDate   DateTime?
  endDate     DateTime?
  dependencies String // Task IDs this task depends on
  tags        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("tasks")
}

model Risk {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  description String
  category    RiskCategory @default(TECHNICAL)
  probability RiskLevel @default(MEDIUM)
  impact      RiskLevel @default(MEDIUM)
  status      RiskStatus @default(IDENTIFIED)
  mitigation  String?
  owner       String?
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("risks")
}

model Document {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  content     String
  docType     DocumentType @default(GENERAL)
  format      String @default("markdown")
  version     String @default("1.0")
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("documents")
}

model FileUpload {
  id          String   @id @default(cuid())
  projectId   String?
  fileName    String
  originalName String
  filePath    String
  fileSize    Int
  mimeType    String
  status      FileStatus @default(UPLOADED)
  processedData Json?
  errorMessage String?
  uploadedAt  DateTime @default(now())
  
  // Relations
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("file_uploads")
}

model VectorEmbedding {
  id          String   @id @default(cuid())
  documentId  String?
  content     String
  embedding   Json     // Store vector embeddings as JSON
  metadata    Json?
  createdAt   DateTime @default(now())
  
  @@map("vector_embeddings")
}

// Enums
enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectType {
  SOFTWARE
  MARKETING
  RESEARCH
  INFRASTRUCTURE
  PRODUCT_LAUNCH
  OTHER
}

enum AgentType {
  INPUT_PARSER
  PLANNING_AGENT
  RISK_ASSESSMENT
  DOCUMENTATION
  ORCHESTRATOR
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum RequirementCategory {
  FUNCTIONAL
  NON_FUNCTIONAL
  BUSINESS
  TECHNICAL
  USER_STORY
}

enum RequirementStatus {
  DRAFT
  REVIEW
  APPROVED
  REJECTED
  IMPLEMENTED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  BLOCKED
}

enum RiskCategory {
  TECHNICAL
  BUSINESS
  OPERATIONAL
  FINANCIAL
  TIMELINE
  RESOURCE
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RiskStatus {
  IDENTIFIED
  ASSESSING
  MITIGATING
  RESOLVED
  CLOSED
}

enum DocumentType {
  REQUIREMENTS
  TECHNICAL_SPEC
  PROJECT_PLAN
  RISK_ASSESSMENT
  USER_STORY
  API_DOC
  GENERAL
}

enum FileStatus {
  UPLOADED
  PROCESSING
  PROCESSED
  ERROR
}
